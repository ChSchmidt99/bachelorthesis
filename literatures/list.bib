@techreport{nvidia2017turing,
  title={NVIDIA Turing GPU Architecture},
  number={WP-09183-001_v01},
  author={Nvidia},
  year={2018},
  type={White Paper},
  url={https://images.nvidia.com/aem-dam/en-zz/Solutions/design-visualization/technologies/turing-architecture/NVIDIA-Turing-Architecture-Whitepaper.pdf},
}

@article{hendrich_parallel_2017,
	title = {Parallel {BVH} {Construction} using {Progressive} {Hierarchical} {Refinement}},
	volume = {36},
	doi = {10.1111/cgf.13143},
	abstract = {We propose a novel algorithm for construction of bounding volume hierarchies (BVHs) for multi-core CPU architectures. The algorithm constructs the BVH by a divisive top-down approach using a progressively refined cut of an existing auxiliary BVH. We propose a new strategy for refining the cut that significantly reduces the workload of individual steps of BVH construction. Additionally, we propose a new method for integrating spatial splits into the BVH construction algorithm. The auxiliary BVH is constructed using a very fast method such as LBVH based on Morton codes. We show that the method provides a very good trade-off between the build time and ray tracing performance. We evaluated the method within the Embree ray tracing framework and show that it compares favorably with the Embree BVH builders regarding build time while maintaining comparable ray tracing speed. © 2017 The Author(s) Computer Graphics Forum © 2017 The Eurographics Association and John Wiley \& Sons Ltd. Published by John Wiley \& Sons Ltd.},
	journal = {Computer Graphics Forum},
	author = {Hendrich, Jakub and Meister, Daniel and Bittner, Jiri},
	month = may,
	year = {2017},
	pages = {487--494},
}

@inproceedings{appel1968,
	author = {Appel, Arthur},
	title = {Some Techniques for Shading Machine Renderings of Solids},
	year = {1968},
	isbn = {9781450378970},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/1468075.1468082},
	doi = {10.1145/1468075.1468082},
	abstract = {Some applications of computer graphics require a vivid illusion of reality. These
	include the spatial organization of machine parts, conceptual architectural design,
	simulation of mechanisms, and industrial design. There has been moderate success in
	the automatic generation of wire frame, cardboard model, polyhedra, and quadric surface
	line drawings. The capability of the machine to generate vivid sterographic pictures
	has been demonstrated. There are, however considerable reasons for developing techniques
	by which line drawings of solids can be shaded, especially the enhancement of the
	sense of solidity and depth. Figures 1 and 2 illustrate the value of shading and shadow
	casting in spatial description. In the line drawing there is no clue as to the relative
	position of the flat plane and the sheet metal console. When shadows are rendered,
	it is clear that the plane is below and to the rear of the console, and the hollow
	nature of the sheet metal assembly is emphasized. Shading can specify the tone or
	color of a surface and the amount of light falling upon that surface from one or more
	light sources. Shadows when sharply defined tend to suggest another viewpoint and
	improves surface definition. When controlled, shading can also emphasize particular
	parts of the drawing. If techniques for the automatic determination of chiaroscuro
	with good resolution should prove to be competitive with line drawings, and this is
	a possibility, machine generated photographs might replace line drawings as the principal
	mode of graphical communication in engineering and architecture.},
	booktitle = {Proceedings of the April 30--May 2, 1968, Spring Joint Computer Conference},
	pages = {37–45},
	numpages = {9},
	location = {Atlantic City, New Jersey},
	series = {AFIPS '68 (Spring)}
}

@article{whitted_improved_1980,
	title = {An improved illumination model for shaded display},
	volume = {23},
	issn = {0001-0782},
	url = {https://doi.org/10.1145/358876.358882},
	doi = {10.1145/358876.358882},
	abstract = {To accurately render a two-dimensional image of a three-dimensional scene, global illumination information that affects the intensity of each pixel of the image must be known at the time the intensity is calculated. In a simplified form, this information is stored in a tree of “rays” extending from the viewer to the first surface encountered and from there to other surfaces and to the light sources. A visible surface algorithm creates this tree for each pixel of the display and passes it to the shader. The shader then traverses the tree to determine the intensity of the light received by the viewer. Consideration of all of these factors allows the shader to accurately simulate true reflection, shadows, and refraction, as well as the effects simulated by conventional shaders. Anti-aliasing is included as an integral part of the visibility calculations. Surfaces displayed include curved as well as polygonal surfaces.},
	number = {6},
	urldate = {2021-05-04},
	journal = {Communications of the ACM},
	author = {Whitted, Turner},
	month = jun,
	year = {1980},
	keywords = {computer animation, computer graphics, raster displays, shading, visible surface algorithms},
	pages = {343--349},
}

@article{clark1976bvh,
	author = {Clark, James H.},
	title = {Hierarchical Geometric Models for Visible Surface Algorithms},
	year = {1976},
	issue_date = {Oct. 1976},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {19},
	number = {10},
	issn = {0001-0782},
	url = {https://doi.org/10.1145/360349.360354},
	doi = {10.1145/360349.360354},
	abstract = {The geometric structure inherent in the definition of the shapes of three-dimensional
	objects and environments is used not just to define their relative motion and placement,
	but also to assist in solving many other problems of systems for producing pictures
	by computer. By using an extension of traditional structure information, or a geometric
	hierarchy, five significant improvements to current techniques are possible. First,
	the range of complexity of an environment is greatly increased while the visible complexity
	of any given scene is kept within a fixed upper limit. Second, a meaningful way is
	provided to vary the amount of detail presented in a scene. Third, “clipping” becomes
	a very fast logarithmic search for the resolvable parts of the environment within
	the field of view. Fourth, frame to frame coherence and clipping define a graphical
	“working set,” or fraction of the total structure that should be present in primary
	store for immediate access by the visible surface algorithm. Finally, the geometric
	structure suggests a recursive descent, visible surface algorithm in which the computation
	time potentially grows linearly with the visible complexity of the scene.},
	journal = {Commun. ACM},
	month = oct,
	pages = {547–554},
	numpages = {8},
	keywords = {visible surface algorithms, hierarchical data structures, hidden surface algorithms, geometric models}
}

@inproceedings{roccia2012kdtree,
	booktitle = {Eurographics 2012 - Short Papers},
	editor = {Carlos Andujar and Enrico Puppo},
	title = {{Hybrid CPU/GPU KD-Tree Construction for Versatile Ray Tracing}},
	author = {Roccia, Jean-Patrick and Paulin, Mathias and Coustet, Christophe},
	year = {2012},
	publisher = {The Eurographics Association},
	ISSN = {1017-4656},
	DOI = {10.2312/conf/EG2012/short/013-016}
}

@INPROCEEDINGS{Havran02onimproving,
    author = {Vlastimil Havran and Jiri Bittner},
    title = {On Improving KD-Trees for Ray Shooting},
    booktitle = {In Proc. of WSCG 2002 Conference},
    year = {2002},
    pages = {209--217}
}

@article{bittner09rdh,
	author = {Bittner, Jiri and Havran, Vlastimil},
	year = {2009},
	month = {05},
	pages = {},
	title = {RDH: Ray distribution heuristics for construction of spatial data structures},
	doi = {10.1145/1980462.1980475}
}

@inproceedings{keller2015path_tracing_revolution,
	author = {Keller, A. and Fascione, L. and Fajardo, M. and Georgiev, I. and Christensen, P. and Hanika, J. and Eisenacher, C. and Nichols, G.},
	title = {The Path Tracing Revolution in the Movie Industry},
	year = {2015},
	isbn = {9781450336345},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/2776880.2792699},
	doi = {10.1145/2776880.2792699},
	abstract = {As path tracing allows for more realistic and faster lighting, an increasing number
	of movies are created the physically based way. With examples from recent movies,
	the architectures and novel workflows of the next generation of production renderers
	are introduced to a wide audience including technical directors, artists, and researchers.},
	booktitle = {ACM SIGGRAPH 2015 Courses},
	articleno = {24},
	numpages = {7},
	location = {Los Angeles, California},
	series = {SIGGRAPH '15}
}

@article{chaitanya_interactive_2017,
	title = {Interactive {Reconstruction} of {Monte} {Carlo} {Image} {Sequences} using a {Recurrent} {Denoising} {Autoencoder}},
	volume = {36},
	language = {en},
	number = {4},
	journal = {ACM Transactions on Graphics},
	author = {Chaitanya, Chakravarty R Alla and Kaplanyan, Anton S and Schied, Christoph and Salvi, Marco and Lefohn, Aaron and Nowrouzezahrai, Derek and Aila, Timo},
	year = {2017},
	pages = {12},
}

@article{vinkler12visibility,
	author = {Vinkler, Marek and Havran, Vlastimil and Sochor, Jiri},
	year = {2012},
	month = {06},
	pages = {},
	title = {Visibility Driven BVH Build Up Algorithm for Ray Tracing},
	volume = {36},
	journal = {Computers & Graphics},
	doi = {10.1016/j.cag.2012.02.013}
}

@article{macdonald_heuristics_1990,
	title = {Heuristics for ray tracing using space subdivision},
	volume = {6},
	issn = {1432-2315},
	url = {https://doi.org/10.1007/BF01911006},
	doi = {10.1007/BF01911006},
	abstract = {Ray tracing requires testing of many rays to determine intersections with objects. A way of reducing the computation is to organize objects into hierarchical data structures. We examine two heuristics for space subdivisions using bintrees, one based on the intuition that surface area is a good estimate of intersection probability, one based on the fact that the optimal splitting plane lies between the spatial median and the object median planes of a volume. Traversal algorithms using cross links between nodes are presented as generalizations of ropes in octrees. Simulations of the surface area heuristic and the cross link scheme are presented. These results generalize to other hierarchical data structures.},
	number = {3},
	journal = {The Visual Computer},
	author = {MacDonald, J. David and Booth, Kellogg S.},
	month = may,
	year = {1990},
	pages = {153--166},
}

@mastersthesis{macDonald1988space,
  author       = {MacDonald, David}, 
  title        = {Space Subdivision Algorithms for Ray Tracing},
  school       = {University of Waterloo},
  year         = {1988},
}

@inproceedings{wu2011sahKdTree,
	author = {Wu, Zhefeng and Zhao, Fukai and Liu, Xinguo},
	title = {SAH KD-Tree Construction on GPU},
	year = {2011},
	isbn = {9781450308960},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/2018323.2018335},
	doi = {10.1145/2018323.2018335},
	abstract = {KD-tree is one of the most efficient acceleration data structures for ray tracing.
	In this paper, we present a kd-tree construction algorithm that is precisely SAH-optimized
	and runs entirely on GPU. We construct the tree nodes in breadth-first order. In order
	to precisely evaluate the SAH cost, we design a parallel scheme based on the standard
	parallel scan primitive to count the triangle numbers for all split candidates, and
	a bucket-based algorithm to sort the AABBs (axis-aligned bounding box) of the clipped
	triangles of the child nodes. The proposed parallel algorithms can be mapped well
	to GPU's streaming architecture. The experiments showed that our algorithm can produce
	the highest quality kd-tree as the off-line CPU algorithms, but runs faster than multi-core
	CPU algorithms and the GPU SAH BVH-Tree algorithm.},
	booktitle = {Proceedings of the ACM SIGGRAPH Symposium on High Performance Graphics},
	pages = {71–78},
	numpages = {8},
	keywords = {ray tracing, parallel computing, KD-tree, GPU, surface area heuristic},
	location = {Vancouver, British Columbia, Canada},
	series = {HPG '11}
}


@inproceedings{choi2010sahKdTree,
	title = "Parallel sah k-D tree construction",
	abstract = "The k-D tree is a well-studied acceleration data structure for ray tracing. It is used to organize primitives in a scene to allow efficient execution of intersection operations between rays and the primitives. The highest quality k-D tree can be obtained using greedy cost optimization based on a surface area heuristc (SAH). While the high quality enables very fast ray tracing times, a key drawback is that the k-D tree construction time remains prohibitively expensive. This cost is unreasonable for rendering dynamic scenes for future visual computing applications on emerging multicore systems. Much work has therefore been focused on faster parallel k-D tree construction performance at the expense of approximating or ignoring SAH computation, which produces k-D trees that degrade rendering time. In this paper, we present two new parallel algorithms for building precise SAH-optimized k-D trees, with different tradeoffs between the total work done and parallel scalability. The algorithms achieve up to 8? speedup on 32 cores, without degrading tree quality and rendering time, yielding the best reported speedups so far for precise-SAH k-D tree construction.",
	author = "Byn Choi and Rakesh Komuravelli and Victor Lu and Hyojin Sung and Bocchino, {Robert L.} and Adve, {Sarita V.} and Hart, {John C.}",
	note = "Funding Information: Acknowledgments Thanks to Ingo Wald for helpful discussions. This work was funded by the Universal Parallel Computing Research Center at the University of Illinois at Urbana-Champaign. The Center is sponsored by Intel Corporation and Microsoft Corporation. Publisher Copyright: {\textcopyright} The Eurographics Association 2010.; 2nd ACM SIGGRAPH / Eurographics on High-Performance Graphics, HPG 2010 ; Conference date: 25-06-2010 Through 27-06-2010",
	year = "2010",
	month = jun,
	day = "25",
	language = "English (US)",
	isbn = "9783905674262",
	series = "High-Performance Graphics - ACM SIGGRAPH / Eurographics Symposium Proceedings, HPG",
	publisher = "Association for Computing Machinery",
	pages = "77--86",
	editor = "Samuli Laine and Warren Hunt and Michael Doggett",
	booktitle = "High-Performance Graphics 2010 - ACM SIGGRAPH / Eurographics Symposium Proceedings, HPG 2010",
}

@article{hasselgren_neural_2020,
	title = {Neural {Temporal} {Adaptive} {Sampling} and {Denoising}},
	volume = {39},
	issn = {0167-7055, 1467-8659},
	url = {https://onlinelibrary.wiley.com/doi/10.1111/cgf.13919},
	doi = {10.1111/cgf.13919},
	abstract = {Despite recent advances in Monte Carlo path tracing at interactive rates, denoised image sequences generated with few samples per-pixel often yield temporally unstable results and loss of high-frequency details. We present a novel adaptive rendering method that increases temporal stability and image ﬁdelity of low sample count path tracing by distributing samples via spatio-temporal joint optimization of sampling and denoising. Adding temporal optimization to the sample predictor enables it to learn spatio-temporal sampling strategies such as placing more samples in disoccluded regions, tracking specular highlights, etc; adding temporal feedback to the denoiser boosts the effective input sample count and increases temporal stability. The temporal approach also allows us to remove the initial uniform sampling step typically present in adaptive sampling algorithms. The sample predictor and denoiser are deep neural networks that we co-train end-to-end over multiple consecutive frames. Our approach is scalable, allowing trade-off between quality and performance, and runs at near real-time rates while achieving signiﬁcantly better image quality and temporal stability than previous methods.},
	language = {en},
	number = {2},
	urldate = {2021-05-05},
	journal = {Computer Graphics Forum},
	author = {Hasselgren, J. and Munkberg, J. and Salvi, M. and Patney, A. and Lefohn, A.},
	month = may,
	year = {2020},
	pages = {147--155},
}

@article{kajiya_rendering_1986,
	title = {{THE} {RENDERING} {EQUATION}},
	volume = {20},
	language = {en},
	number = {4},
	author = {Kajiya, James T},
	year = {1986},
	pages = {8},
}

@article{fuchs1980bsp,
	author = {Fuchs, Henry and Kedem, Zvi M. and Naylor, Bruce F.},
	title = {On Visible Surface Generation by a Priori Tree Structures},
	year = {1980},
	issue_date = {July 1980},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {14},
	number = {3},
	issn = {0097-8930},
	url = {https://doi.org/10.1145/965105.807481},
	doi = {10.1145/965105.807481},
	abstract = {This paper describes a new algorithm for solving the hidden surface (or line) problem,
	to more rapidly generate realistic images of 3-D scenes composed of polygons, and
	presents the development of theoretical foundations in the area as well as additional
	related algorithms. As in many applications the environment to be displayed consists
	of polygons many of whose relative geometric relations are static, we attempt to capitalize
	on this by preprocessing the environment's database so as to decrease the run-time
	computations required to generate a scene. This preprocessing is based on generating
	a “binary space partitioning” tree whose in order traversal of visibility priority
	at run-time will produce a linear order, dependent upon the viewing position, on (parts
	of) the polygons, which can then be used to easily solve the hidden surface problem.
	In the application where the entire environment is static with only the viewing-position
	changing, as is common in simulation, the results presented will be sufficient to
	solve completely the hidden surface problem.},
	journal = {SIGGRAPH Comput. Graph.},
	month = jul,
	pages = {124–133},
	numpages = {10}
}

@article{clark_hierarchical_1976,
	title = {Hierarchical geometric models for visible surface algorithms},
	volume = {19},
	issn = {0001-0782, 1557-7317},
	url = {https://dl.acm.org/doi/10.1145/360349.360354},
	doi = {10.1145/360349.360354},
	abstract = {The geometric structure inherent in the definition of the shapes of three-dimensional objects and environments is used not just to define their relative motion and placement, but also to assist in solving many other problems of systems for producing pictures by computer. By using an extension of traditional structure information, or a geometric hierarchy, five significant improvements to current techniques are possible. First, the range of complexity of an environment is greatly increased while the visible complexity of any given scene is kept within a fixed upper limit. Second, a meaningful way is provided to vary the amount of detail presented in a scene. Third, “clipping” becomes a very fast logarithmic search for the resolvable parts of the environment within the field of view. Fourth, frame to frame coherence and clipping define a graphical “working set,” or fraction of the total structure that should be present in primary store for immediate access by the visible surface algorithm. Finally, the geometric structure suggests a recursive descent, visible surface algorithm in which the computation time potentially grows linearly with the visible complexity of the scene.},
	language = {en},
	number = {10},
	urldate = {2021-05-04},
	journal = {Communications of the ACM},
	author = {Clark, James H.},
	month = oct,
	year = {1976},
	pages = {547--554},
}

@article{zeng_temporally_2021,
	title = {Temporally {Reliable} {Motion} {Vectors} for {Real}-time {Ray} {Tracing}},
	abstract = {Real-time ray tracing (RTRT) is being pervasively applied. The key to RTRT is a reliable denoising scheme that reconstructs clean images from signiﬁcantly undersampled noisy inputs, usually at 1 sample per pixel as limited by current hardware’s computing power. The state of the art reconstruction methods all rely on temporal ﬁltering to ﬁnd correspondences of current pixels in the previous frame, described using per-pixel screen-space motion vectors. While these approaches are demonstrated powerful, they suffer from a common issue that the temporal information cannot be used when the motion vectors are not valid, i.e. when temporal correspondences are not obviously available or do not exist in theory.},
	language = {en},
	author = {Zeng, Zheng and Liu, Shiqiu and Yang, Jinglei and Wang, Lu and Yan, Ling-Qi},
	year = {2021},
	pages = {12},
}

@article{cook_distributed_1984,
	title = {Distributed ray tracing},
	volume = {18},
	issn = {0097-8930},
	url = {https://doi.org/10.1145/964965.808590},
	doi = {10.1145/964965.808590},
	abstract = {Ray tracing is one of the most elegant techniques in computer graphics. Many phenomena that are difficult or impossible with other techniques are simple with ray tracing, including shadows, reflections, and refracted light. Ray directions, however, have been determined precisely, and this has limited the capabilities of ray tracing. By distributing the directions of the rays according to the analytic function they sample, ray tracing can incorporate fuzzy phenomena. This provides correct and easy solutions to some previously unsolved or partially solved problems, including motion blur, depth of field, penumbras, translucency, and fuzzy reflections. Motion blur and depth of field calculations can be integrated with the visible surface calculations, avoiding the problems found in previous methods.},
	number = {3},
	urldate = {2021-05-04},
	journal = {ACM SIGGRAPH Computer Graphics},
	author = {Cook, Robert L. and Porter, Thomas and Carpenter, Loren},
	month = jan,
	year = {1984},
	keywords = {Camera, Constructive solid geometry, Depth of field, Focus, Gloss, Motion blur, Penumbras, Ray tracing, Shadows, Translucency, Transparency},
	pages = {137--145},
}

@article{schied_spatiotemporal_2017,
	title = {Spatiotemporal {Variance}-{Guided} {Filtering}: {Real}-{Time} {Reconstruction} for {Path}-{Traced} {Global} {Illumination}},
	abstract = {We introduce a reconstruction algorithm that generates a temporally stable sequence of images from one path-per-pixel global illumination. To handle such noisy input, we use temporal accumulation to increase the e ective sample count and spatiotemporal luminance variance estimates to drive a hierarchical, image-space wavelet lter [Dammertz et al. 2010]. is hierarchy allows us to distinguish between noise and detail at multiple scales using local luminance variance.},
	language = {en},
	journal = {Los Angeles},
	author = {Schied, Christoph and Kaplanyan, Anton and Wyman, Chris and Patney, Anjul and Chaitanya, Chakravarty R Alla and Burgess, John and Liu, Shiqiu and Dachsbacher, Carsten and Lefohn, Aaron and Salvi, Marco},
	year = {2017},
	pages = {12},
}

@inproceedings{mara17towards,
    author = "Mara, Michael and McGuire, Morgan and Bitterli, Benedikt and Jarosz, Wojciech",
    title = "An Efficient Denoising Algorithm for Global Illumination",
    booktitle = "Proceedings of High Performance Graphics",
    year = "2017",
    month = jul,
    publisher = "ACM",
    address = "New York, NY, USA",
    isbn = "978-1-4503-5101-0",
    location = "Los Angeles, California, USA",
    doi = "10/gfzndq",
    abstract = "We propose a hybrid ray-tracing/rasterization strategy for real- time rendering enabled by a fast new denoising method. We factor global illumination into direct light at rasterized primary surfaces and two indirect lighting terms, each estimated with one path- traced sample per pixel. Our factorization enables efficient (biased) reconstruction by denoising light without blurring materials. We demonstrate denoising in under 10 ms per 1280×720 frame, compare results against the leading offline denoising methods, and include a supplement with source code, video, and data."
}

@article{morton66curve,
	author = {Morton, Guy},
	year = {1966},
	month = {01},
	pages = {},
	title = {A Computer Oriented Geodetic Data Base and a New Technique in File Sequencing}
}

@article{lauterbach09lbvh,
	author = {Lauterbach, C. and Garland, M. and Sengupta, S. and Luebke, D. and Manocha, D.},
	title = {Fast BVH Construction on GPUs},
	journal = {Computer Graphics Forum},
	volume = {28},
	number = {2},
	pages = {375-384},
	doi = {https://doi.org/10.1111/j.1467-8659.2009.01377.x},
	url = {https://onlinelibrary.wiley.com/doi/abs/10.1111/j.1467-8659.2009.01377.x},
	eprint = {https://onlinelibrary.wiley.com/doi/pdf/10.1111/j.1467-8659.2009.01377.x},
	abstract = {Abstract We present two novel parallel algorithms for rapidly constructing bounding volume hierarchies on manycore GPUs. The first uses a linear ordering derived from spatial Morton codes to build hierarchies extremely quickly and with high parallel scalability. The second is a top-down approach that uses the surface area heuristic (SAH) to build hierarchies optimized for fast ray tracing. Both algorithms are combined into a hybrid algorithm that removes existing bottlenecks in the algorithm for GPU construction performance and scalability leading to significantly decreased build time. The resulting hierarchies are close in to optimized SAH hierarchies, but the construction process is substantially faster, leading to a significant net benefit when both construction and traversal cost are accounted for. Our preliminary results show that current GPU architectures can compete with CPU implementations of hierarchy construction running on multicore systems. In practice, we can construct hierarchies of models with up to several million triangles and use them for fast ray tracing or other applications.},
	year = {2009}
}

@inproceedings{karras12lbvh,
	author = {Karras, Tero},
	title = {Maximizing Parallelism in the Construction of BVHs, Octrees, and <i>k</i>-d Trees},
	year = {2012},
	isbn = {9783905674415},
	publisher = {Eurographics Association},
	address = {Goslar, DEU},
	abstract = {A number of methods for constructing bounding volume hierarchies and point-based octrees
	on the GPU are based on the idea of ordering primitives along a space-filling curve.
	A major shortcoming with these methods is that they construct levels of the tree sequentially,
	which limits the amount of parallelism that they can achieve. We present a novel approach
	that improves scalability by constructing the entire tree in parallel. Our main contribution
	is an in-place algorithm for constructing binary radix trees, which we use as a building
	block for other types of trees.},
	booktitle = {Proceedings of the Fourth ACM SIGGRAPH / Eurographics Conference on High-Performance Graphics},
	pages = {33–37},
	numpages = {5},
	location = {Paris, France},
	series = {EGGH-HPG'12}
}

@article{Walter2008FastAC,
	title={Fast agglomerative clustering for rendering},
	author={B. Walter and K. Bala and M. Kulkarni and K. Pingali},
	journal={2008 IEEE Symposium on Interactive Ray Tracing},
	year={2008},
	pages={81-86}
}

@inproceedings {apetrei14lbvh,
	booktitle = {Computer Graphics and Visual Computing (CGVC)},
	editor = {Rita Borgo and Wen Tang},
	title = {{Fast and Simple Agglomerative LBVH Construction}},
	author = {Apetrei, Ciprian},
	year = {2014},
	publisher = {The Eurographics Association},
	ISBN = {978-3-905674-70-5},
	DOI = {10.2312/cgvc.20141206}
}

@inproceedings{wald07fastConstruction,
	author = {Wald, Ingo},
	year = {2007},
	month = {10},
	pages = {33 - 40},
	title = {On Fast Construction of SAH based Bounding Volume Hierarchies},
	isbn = {978-1-4244-1629-5},
	journal = {Proceedings of IEEE Symposium on Interactive Ray Tracing 2007},
	doi = {10.1109/RT.2007.4342588}
}

@inproceedings{popov09harmful,
	author = {Popov, Stefan and Georgiev, Iliyan and Dimov, Rossen and Slusallek, Philipp},
	year = {2009},
	month = {01},
	pages = {15-22},
	title = {Object partitioning considered harmful: Space subdivision for BVHs},
	journal = {Proceedings of the Conference on High Performance Graphics 2009 (HPG ’09)},
	doi = {10.1145/1572769.1572772}
}

@article{schied_gradient_2018,
	title = {Gradient {Estimation} for {Real}-time {Adaptive} {Temporal} {Filtering}},
	volume = {1},
	issn = {2577-6193},
	url = {https://dl.acm.org/doi/10.1145/3233301},
	doi = {10.1145/3233301},
	abstract = {With the push towards physically based rendering, stochastic sampling of shading, e.g. using path tracing, is becoming increasingly important in real-time rendering. To achieve high performance, only low sample counts are viable, which necessitates the use of sophisticated reconstruction filters. Recent research on such filters has shown dramatic improvements in both quality and performance. They exploit the coherence of consecutive frames by reusing temporal information to achieve stable, denoised results. However, existing temporal filters often create objectionable artifacts such as ghosting and lag. We propose a novel temporal filter which analyzes the signal over time to derive adaptive temporal accumulation factors per pixel. It repurposes a subset of the shading budget to sparsely sample and reconstruct the temporal gradient. This allows us to reliably detect sudden changes of the sampled signal and to drop stale history information. We create gradient samples through forward-projection of surface samples from the previous frame into the current frame and by reevaluating the shading samples using the same random sequence. We apply our filter to improve real-time path tracers. Compared to previous work, we show a significant reduction of lag and ghosting as well as improved temporal stability. Our temporal filter runs in 2 ms at 1080p on modern graphics hardware and can be integrated into deferred renderers.},
	language = {en},
	number = {2},
	urldate = {2021-05-04},
	journal = {Proceedings of the ACM on Computer Graphics and Interactive Techniques},
	author = {Schied, Christoph and Peters, Christoph and Dachsbacher, Carsten},
	month = aug,
	year = {2018},
	pages = {1--16},
}

@article{bako_kernel-predicting_2017,
	title = {Kernel-predicting convolutional networks for denoising {Monte} {Carlo} renderings},
	volume = {36},
	issn = {0730-0301, 1557-7368},
	url = {https://dl.acm.org/doi/10.1145/3072959.3073708},
	doi = {10.1145/3072959.3073708},
	language = {en},
	number = {4},
	urldate = {2021-05-04},
	journal = {ACM Transactions on Graphics},
	author = {Bako, Steve and Vogels, Thijs and Mcwilliams, Brian and Meyer, Mark and NováK, Jan and Harvill, Alex and Sen, Pradeep and Derose, Tony and Rousselle, Fabrice},
	month = jul,
	year = {2017},
	pages = {1--14},
}

@article{koskela2019bmfr,
	author = {Koskela, Matias and Immonen, Kalle and M\"{a}kitalo, Markku and Foi, Alessandro and Viitanen, Timo and J\"{a}\"{a}skel\"{a}inen, Pekka and Kultala, Heikki and Takala, Jarmo},
	title = {Blockwise Multi-Order Feature Regression for Real-Time Path-Tracing Reconstruction},
	year = {2019},
	issue_date = {November 2019},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {38},
	number = {5},
	issn = {0730-0301},
	url = {https://doi.org/10.1145/3269978},
	doi = {10.1145/3269978},
	abstract = {Path tracing produces realistic results including global illumination using a unified
	simple rendering pipeline. Reducing the amount of noise to imperceptible levels without
	post-processing requires thousands of samples per pixel (spp), while currently it
	is only possible to render extremely noisy 1 spp frames in real time with desktop
	GPUs. However, post-processing can utilize feature buffers, which contain noise-free
	auxiliary data available in the rendering pipeline. Previously, regression-based noise
	filtering methods have only been used in offline rendering due to their high computational
	cost. In this article we propose a novel regression-based reconstruction pipeline,
	called Blockwise Multi-Order Feature Regression (BMFR), tailored for path-traced 1
	spp inputs that runs in real time. The high speed is achieved with a fast implementation
	of augmented QR factorization and by using stochastic regularization to address rank-deficient
	feature data. The proposed algorithm is 1.8\texttimes{} faster than the previous state-of-the-art
	real-time path-tracing reconstruction method while producing better quality frame
	sequences.},
	journal = {ACM Trans. Graph.},
	month = jun,
	articleno = {138},
	numpages = {14},
	keywords = {reconstruction, Path tracing, regression, real-time}
}

@inproceedings{karras_fast_2013,
	address = {New York, NY, USA},
	series = {{HPG} '13},
	title = {Fast parallel construction of high-quality bounding volume hierarchies},
	isbn = {978-1-4503-2135-8},
	url = {https://doi.org/10.1145/2492045.2492055},
	doi = {10.1145/2492045.2492055},
	abstract = {We propose a new massively parallel algorithm for constructing high-quality bounding volume hierarchies (BVHs) for ray tracing. The algorithm is based on modifying an existing BVH to improve its quality, and executes in linear time at a rate of almost 40M triangles/sec on NVIDIA GTX Titan. We also propose an improved approach for parallel splitting of triangles prior to tree construction. Averaged over 20 test scenes, the resulting trees offer over 90\% of the ray tracing performance of the best offline construction method (SBVH), while previous fast GPU algorithms offer only about 50\%. Compared to state-of-the-art, our method offers a significant improvement in the majority of practical workloads that need to construct the BVH for each frame. On the average, it gives the best overall performance when tracing between 7 million and 60 billion rays per frame. This covers most interactive applications, product and architectural design, and even movie rendering.},
	urldate = {2021-05-04},
	booktitle = {Proceedings of the 5th {High}-{Performance} {Graphics} {Conference}},
	publisher = {Association for Computing Machinery},
	author = {Karras, Tero and Aila, Timo},
	month = jul,
	year = {2013},
	keywords = {bounding volume hierarchies, ray tracing},
	pages = {89--99},
}

@inproceedings{karras_maximizing_2012,
	address = {Goslar, DEU},
	series = {{EGGH}-{HPG}'12},
	title = {Maximizing parallelism in the construction of {BVHs}, octrees, and \textit{k}-d trees},
	isbn = {978-3-905674-41-5},
	abstract = {A number of methods for constructing bounding volume hierarchies and point-based octrees on the GPU are based on the idea of ordering primitives along a space-filling curve. A major shortcoming with these methods is that they construct levels of the tree sequentially, which limits the amount of parallelism that they can achieve. We present a novel approach that improves scalability by constructing the entire tree in parallel. Our main contribution is an in-place algorithm for constructing binary radix trees, which we use as a building block for other types of trees.},
	urldate = {2021-05-04},
	booktitle = {Proceedings of the {Fourth} {ACM} {SIGGRAPH} / {Eurographics} conference on {High}-{Performance} {Graphics}},
	publisher = {Eurographics Association},
	author = {Karras, Tero},
	month = jun,
	year = {2012},
	pages = {33--37},
}

@article{chitalu20lbvh,
	author = {Chitalu, Floyd and Dubach, Christophe and Komura, Taku},
	year = {2020},
	month = {05},
	pages = {509-521},
	title = {Binary Ostensibly‐Implicit Trees for Fast Collision Detection},
	volume = {39},
	journal = {Computer Graphics Forum},
	doi = {10.1111/cgf.13948}
}

@article{meister21survey,
	author = {Meister, Daniel and Ogaki, Shinji and Benthin, Carsten and Doyle, Michael and Guthe, Michael and Bittner, Jiri},
	year = {2021},
	month = {05},
	pages = {683-712},
	title = {A Survey on Bounding Volume Hierarchies for Ray Tracing},
	volume = {40},
	journal = {Computer Graphics Forum},
	doi = {10.1111/cgf.142662}
}

@phdthesis{havrand2000comparison,
	author = {Havran, Vlastimil},
	year = {2000},
	month = {11},
	pages = {},
	title = {Heuristic Ray Shooting Algorithms}
}

@article{vinkler2015comparison,
	author = {Vinkler, Marek and Havran, Vlastimil and Bittner, Jiri},
	year = {2015},
	month = {11},
	pages = {n/a-n/a},
	title = {Performance Comparison of Bounding Volume Hierarchies and Kd-Trees for GPU Ray Tracing},
	volume = {35},
	journal = {Computer Graphics Forum},
	doi = {10.1111/cgf.12776}
}

@article{wald_ray_2007,
	title = {Ray {Tracing} {Deformable} {Scenes} using {Dynamic} {Bounding} {Volume} {Hierarchies}},
	volume = {26},
	doi = {10.1145/1189762.1206075},
	abstract = {The most significant deficiency of most of today's interactive ray tracers is that they are restricted to static walkthroughs. This restriction is due to the static nature of the acceleration structures used. While the best reported frame rates for static geometric models have been achieved using carefully constructed kd-trees, this article shows that bounding volume hierarchies (BVHs) can be used to efficiently ray trace large static models.More importantly, the BVH can be used to ray trace deformable models (sets of triangles whose positions change over time) with little loss of performance. A variety of efficiency techniques are used to achieve this performance, but three algorithmic changes to the typical BVH algorithm are mainly responsible. First, the BVH is built using a variant of the surface area heuristic conventionally used to build kd-trees. Second, the topology of the BVH is not changed over time so that only the bounding volumes need to be refit from frame-to-frame. Third, and most importantly, packets of rays are traced together through the BVH using a novel integrated packet-frustum traversal scheme. This traversal scheme elegantly combines the advantages of both packet traversal and frustum traversal and allows for rapid hierarchy descent for packets that hit bounding volumes as well as rapid exits for packets that miss. A BVH-based ray tracing system using these techniques is shown to achieve performance for deformable models comparable to that previously available only for static models.},
	journal = {ACM Trans. Graph.},
	author = {Wald, Ingo and Boulos, Solomon and Shirley, Peter},
	month = jan,
	year = {2007},
}

@inproceedings{vinkler_bounding_2014,
	address = {New York, NY, USA},
	series = {{SCCG} '14},
	title = {Bounding volume hierarchies versus kd-trees on contemporary many-core architectures},
	isbn = {978-1-4503-3070-1},
	url = {https://doi.org/10.1145/2643188.2643196},
	doi = {10.1145/2643188.2643196},
	abstract = {We present a performance comparison of bounding volume hierarchies and kd-trees for ray tracing on many-core architectures (GPUs). The comparison is focused on rendering times and traversal characteristics on the GPU using data structures that were optimized for maximum performance of tracing rays irrespective of the time needed for their build. We show that for a contemporary GPU architecture (NVIDIA Kepler) bounding volume hierarchies have higher ray tracing performance than kd-trees for simple and moderately complex scenes. Kd-trees, on the other hand, have higher performance for complex scenes, in particular for those with occlusion.},
	urldate = {2021-05-04},
	booktitle = {Proceedings of the 30th {Spring} {Conference} on {Computer} {Graphics}},
	publisher = {Association for Computing Machinery},
	author = {Vinkler, Marek and Havran, Vlastimil and Bittner, Jiří},
	month = may,
	year = {2014},
	keywords = {bounding volume hierarchy, kd-tree, performance study, ray tracing},
	pages = {29--36},
}

@article{goldsmith_automatic_1987,
	title = {Automatic {Creation} of {Object} {Hierarchies} for {Ray} {Tracing}},
	volume = {7},
	issn = {0272-1716},
	url = {https://doi.org/10.1109/MCG.1987.276983},
	doi = {10.1109/MCG.1987.276983},
	abstract = {Intersection calculations dominate the run time of canonical ray tracers. A common algorithm to reduce the number of intersection tests required is the intersection of rays with a tree of extents, rather than the whole database of objects. A shortcoming of this method is that these trees are difficult to generate. Additionally, manually generated trees can be poor, greatly reducing the run-time improvement available. We present methods for evaluation of these trees in approximate number of intersection calculations required and for automatic generation of good trees. These methods run in O(nlogn) expected time where n is the number of objects in the scene. We report some examples of speedups.},
	number = {5},
	urldate = {2021-05-04},
	journal = {IEEE Computer Graphics and Applications},
	author = {Goldsmith, Jeffrey and Salmon, John},
	month = may,
	year = {1987},
	pages = {14--20},
}

@article{kay_ray_1986,
	title = {Ray tracing complex scenes},
	volume = {20},
	issn = {0097-8930},
	url = {https://doi.org/10.1145/15886.15916},
	doi = {10.1145/15886.15916},
	abstract = {A new algorithm for speeding up ray-object intersection calculations is presented. Objects are bounded by a new type of extent, which can be made to fit convex hulls arbitrarily tightly. The objects are placed into a hierarchy. A new hierarchy traversal algorithm is presented which is efficient in the sense that objects along the ray are queried in an efficient order.Results are presented which demonstrate that our technique is several times faster than other published algorithms. Furthermore, we demonstrate that it is currently possible to ray trace scenes containing hundreds of thousands of objects.},
	number = {4},
	urldate = {2021-05-04},
	journal = {ACM SIGGRAPH Computer Graphics},
	author = {Kay, Timothy L. and Kajiya, James T.},
	month = aug,
	year = {1986},
	pages = {269--278},
}

@article{rubin_3-dimensional_1980,
	title = {A 3-dimensional representation for fast rendering of complex scenes},
	volume = {14},
	issn = {0097-8930},
	url = {https://doi.org/10.1145/965105.807479},
	doi = {10.1145/965105.807479},
	abstract = {Hierarchical representations of 3-dimensional objects are both time and space efficient. They typically consist of trees whose branches represent bounding volumes and whose terminal nodes represent primitive object elements (usually polygons). This paper describes a method whereby the object space is represented entirely by a hierarchical data structure consisting of bounding volumes, with no other form of representation. This homogencity allows the visible surface rendering to be performed simply and efficiently. The bounding volumes selected for this algorithm are parallelepipeds oriented to minimize their size. With this representation, any surface can be rendered since in the limit the bounding volumes make up a point representation of the object. The advantage is that the visibility calculations consist only of a search through the data structure to determine the correspondence between terminal level bounding volumes and the current pixel. For ray tracing algorithms, this means that a simplified operation will produce the point of intersection of each ray with the bounding volumes. Memory requirements are minimized by expanding or fetching the lower levels of the hierarchy only when required. Because the viewing process has a single operation and primitive type, the software or hardware chosen to implement the search can be highly optimized for very fast execution.},
	number = {3},
	urldate = {2021-05-04},
	journal = {ACM SIGGRAPH Computer Graphics},
	author = {Rubin, Steven M. and Whitted, Turner},
	month = jul,
	year = {1980},
	keywords = {Computer graphics, Hierarchical data structures, Object descriptions, Visible surface algorithms},
	pages = {110--116},
}

@article{clark_hierarchical_1976-1,
	title = {Hierarchical geometric models for visible surface algorithms},
	volume = {19},
	issn = {0001-0782},
	url = {https://doi.org/10.1145/360349.360354},
	doi = {10.1145/360349.360354},
	abstract = {The geometric structure inherent in the definition of the shapes of three-dimensional objects and environments is used not just to define their relative motion and placement, but also to assist in solving many other problems of systems for producing pictures by computer. By using an extension of traditional structure information, or a geometric hierarchy, five significant improvements to current techniques are possible. First, the range of complexity of an environment is greatly increased while the visible complexity of any given scene is kept within a fixed upper limit. Second, a meaningful way is provided to vary the amount of detail presented in a scene. Third, “clipping” becomes a very fast logarithmic search for the resolvable parts of the environment within the field of view. Fourth, frame to frame coherence and clipping define a graphical “working set,” or fraction of the total structure that should be present in primary store for immediate access by the visible surface algorithm. Finally, the geometric structure suggests a recursive descent, visible surface algorithm in which the computation time potentially grows linearly with the visible complexity of the scene.},
	number = {10},
	urldate = {2021-05-04},
	journal = {Communications of the ACM},
	author = {Clark, James H.},
	month = oct,
	year = {1976},
	keywords = {geometric models, hidden surface algorithms, hierarchical data structures, visible surface algorithms},
	pages = {547--554},
}

@article{fujimoto_arts_1986,
	title = {{ARTS}: {Accelerated} {Ray}-{Tracing} {System}},
	volume = {6},
	issn = {1558-1756},
	shorttitle = {{ARTS}},
	doi = {10.1109/MCG.1986.276715},
	abstract = {In this article we propose algorithms that address the two basic problems encountered in generating continuous-tone images by ray tracing: speed and aliasing. We examine previous approaches to the problem and then propose a scheme based on the coherency of an auxiliary data structure imposed on the original object domain. After investigating both simple spatial enumeration and a hybrid octree approach, we developed 3DDDA, a 3D line generator for efficient traversing of both structures. 3DDDA provides an order of magnitude improvement in processing speed compared to other known ray-tracing methods. Processing time is found to be virtually independent of the number of objects involved in the scene. For large numbers of objects, this method actully becomes faster than scan-line methods. To remove jags from edges, a scheme for identifying edge orientation and distance from pixel center to true edge has been implemented. The time required for antialiasing depends on the total length of the edges encountered, but it is normally only a fractional addition to the time needed to produce the scene without antialiasing.},
	number = {4},
	journal = {IEEE Computer Graphics and Applications},
	author = {Fujimoto, Akira and Tanaka, Takayuki and Iwata, Kansei},
	month = apr,
	year = {1986},
	note = {Conference Name: IEEE Computer Graphics and Applications},
	keywords = {Acceleration, Computer graphics, Data structures, Image generation, Layout, Lighting, Ray tracing, Rendering (computer graphics), Shape, Subspace constraints},
	pages = {16--26},
}

@inproceedings{kaplan_use_1985,
	title = {The use of spatial coherence in ray tracing},
	volume = {85},
	booktitle = {{ACM} {SIGGRAPH}},
	author = {Kaplan, Michael R.},
	year = {1985},
	pages = {22--26},
}

@article{glassner_space_1984,
	title = {Space subdivision for fast ray tracing},
	volume = {4},
	issn = {1558-1756},
	doi = {10.1109/MCG.1984.6429331},
	abstract = {An algorithm is described that speeds up ray-tracing techniques by reducing the number of time-consuming object-ray intersection calculations that have to be made. The algorithm is based on subdividing space into an octree, associating a given voxel with only those objects whose surfaces pass through the volume of the voxel. It includes a technique for obtaining fast access to any node and a mechanism for finding the next node intersected by a ray when it has hit nothing in the current node. This new algorithm makes possible the ray tracing of complex scenes by medium-scale and small-scale computers.},
	number = {10},
	journal = {IEEE Computer Graphics and Applications},
	author = {Glassner, Andrew S.},
	month = oct,
	year = {1984},
	note = {Conference Name: IEEE Computer Graphics and Applications},
	keywords = {Algorithm design and analysis, Computers, Databases, Image generation, Octrees, Ray tracing, Surface treatment},
	pages = {15--24},
}

@article{veach_bidirectional_1995,
	title = {Bidirectional {Estimators} for {Light} {Transport}},
	issn = {978-3-642-87827-5},
	doi = {10.1007/978-3-642-87825-1_11},
	abstract = {Most of the research on the global illumination problem in computer graphics has been concentrated on finite-element (radiosity) techniques. Monte Carlo methods are an intriguing alternative which are attractive for their ability to handle very general scene descriptions without the need for meshing. In this paper we study techniques for reducing the sampling noise inherent in pure Monte Carlo approaches to global illumination. Every light energy transport path from a light source to the eye can be generated in a number of different ways, according to how we partition the path into an initial portion traced from a light source, and a final portion traced from the eye. Each partitioning gives us a different unbiased estimator, but some partitionings give estimators with much lower variance than others. We give examples of this phenomenon and describe its significance. We also present work in progress on the problem of combining these multiple estimators to achieve near-optimal variance, with the goal of producing images with less noise for a given number of samples.},
	journal = {Proceedings of Eurographics Workshop on Rendering},
	author = {Veach, Eric and Guibas, Leonidas},
	month = jan,
	year = {1995},
}

@article{lafortune_bi-directional_1998,
	title = {Bi-{Directional} {Path} {Tracing}},
	volume = {93},
	abstract = {In this paper we present a new Monte Carlo rendering algorithm that seamlessly integrates},
	journal = {Proceedings of Third International Conference on Computational Graphics and Visualization Techniques (Compugraphics'},
	author = {Lafortune, Eric and Willems, Yves},
	month = jan,
	year = {1998},
}

@inproceedings{kajiya_rendering_1986-1,
	address = {New York, NY, USA},
	series = {{SIGGRAPH} '86},
	title = {The rendering equation},
	isbn = {978-0-89791-196-2},
	url = {https://doi.org/10.1145/15922.15902},
	doi = {10.1145/15922.15902},
	abstract = {We present an integral equation which generalizes a variety of known rendering algorithms. In the course of discussing a monte carlo solution we also present a new form of variance reduction, called Hierarchical sampling and give a number of elaborations shows that it may be an efficient new technique for a wide variety of monte carlo procedures. The resulting rendering algorithm extends the range of optical phenomena which can be effectively simulated.},
	urldate = {2021-05-04},
	booktitle = {Proceedings of the 13th annual conference on {Computer} graphics and interactive techniques},
	publisher = {Association for Computing Machinery},
	author = {Kajiya, James T.},
	month = aug,
	year = {1986},
	pages = {143--150},
}

